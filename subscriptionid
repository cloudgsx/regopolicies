package azure.authorization

# Allow resource creation only if the subscription and creator ID are valid
allow {
    valid_subscription
    valid_creator_id
}

# Deny resource creation if either the subscription or creator ID is invalid
deny {
    not valid_subscription
    not valid_creator_id
}

# Validate that the subscription is authorized
valid_subscription {
    input.provider == "azurerm.authorized_subscription"
}

# Validate that the creator ID is in the approved list
valid_creator_id {
    approved_creator_ids := {"authorized.user@company.com"}
    approved_creator_ids[input.tags.creator_id]
}

# Handle cases where fields are missing
missing_fields {
    not input.provider
    not input.tags.creator_id
}


Added missing_fields Rule:

This rule ensures that the policy can handle cases where critical fields (provider or creator_id) are missing from the input.
Separated allow and deny Logic:

The deny rule explicitly negates the conditions in valid_subscription and valid_creator_id. This makes it clearer why a resource creation request is denied.
Improved Safety for Missing Fields:

By validating the presence of the fields (e.g., input.provider and input.tags.creator_id), we avoid errors in situations where the input might not contain the expected structure.
Explicitness:

The updated policy is more explicit and handles edge cases (like missing fields) more gracefully.

==============================

Explanation of the Policy
valid_subscription: Checks if the provider field in the input matches the approved Azure subscription (e.g., azurerm.authorized_subscription).

valid_creator_id: Verifies that the creator_id in the tags section of the input is part of the pre-approved list.

allow: Returns true if both valid_subscription and valid_creator_id rules are satisfied.

deny: Returns true if either the subscription or the creator ID is invalid.


============

Mock JSON Test Cases for Azure
Test Case 1: Authorized Subscription and Creator ID
Input:

{
  "provider": "azurerm.authorized_subscription",
  "tags": {
    "creator_id": "authorized.user@company.com"
  }
}

Expected Output:

{
  "allow": true,
  "deny": false
}

===================================

Test Case 2: Unauthorized Subscription
Input:

{
  "provider": "azurerm.unauthorized_subscription",
  "tags": {
    "creator_id": "authorized.user@company.com"
  }
}

Expected Output:

{
  "allow": false,
  "deny": true
}

=============================================

Test Case 3: Unauthorized Creator ID
Input:
{
  "provider": "azurerm.authorized_subscription",
  "tags": {
    "creator_id": "unauthorized.user@company.com"
  }
}

Expected Output:
{
  "allow": false,
  "deny": true
}


=========================================

Test Case 4: Both Subscription and Creator ID Unauthorized
Input:

{
  "provider": "azurerm.unauthorized_subscription",
  "tags": {
    "creator_id": "unauthorized.user@company.com"
  }
}

Expected Output:
{
  "allow": false,
  "deny": true
}


=========================


Subscription Authorization Policy
This repository contains an Open Policy Agent (OPA) policy written in Rego to validate resource creation requests based on subscription authorization and creator ID validation.

Overview
The policy ensures that:

Only authorized subscriptions can create resources.
Only approved creator IDs are allowed to create resources.
It is designed to integrate with Azure RBAC and provides audit logging for validation.




=======================================






Full Set of JSON Mocks for All Cases
1. Case 1: Valid Subscription and Creator ID
Description: Authorized subscription and valid creator_id.


{
  "resource": {
    "azurerm_resource_group": {
      "example": {
        "name": "example-resources",
        "location": "eastus",
        "tags": {
          "creator_id": "authorized.user@company.com"
        },
        "provider": "azurerm.authorized_subscription"
      }
    }
  }
}



2. Case 2: Invalid Subscription
Description: Unauthorized subscription but valid creator_id.
Mock:

{
  "resource": {
    "azurerm_resource_group": {
      "example": {
        "name": "example-resources",
        "location": "eastus",
        "tags": {
          "creator_id": "authorized.user@company.com"
        },
        "provider": "azurerm.unauthorized_subscription"
      }
    }
  }
}


3. Case 3: Invalid Creator ID
Description: Authorized subscription but invalid creator_id.
Mock:

{
  "resource": {
    "azurerm_resource_group": {
      "example": {
        "name": "example-resources",
        "location": "eastus",
        "tags": {
          "creator_id": "unauthorized.user@company.com"
        },
        "provider": "azurerm.authorized_subscription"
      }
    }
  }
}

4. Case 4: Both Subscription and Creator ID Invalid
Description: Unauthorized subscription and invalid creator_id.
Mock:

{
  "resource": {
    "azurerm_resource_group": {
      "example": {
        "name": "example-resources",
        "location": "eastus",
        "tags": {
          "creator_id": "unauthorized.user@company.com"
        },
        "provider": "azurerm.unauthorized_subscription"
      }
    }
  }
}


5. Case 5: Missing Creator ID Tag
Description: Authorized subscription but no creator_id tag provided.
Mock:

{
  "resource": {
    "azurerm_resource_group": {
      "example": {
        "name": "example-resources",
        "location": "eastus",
        "tags": {},
        "provider": "azurerm.authorized_subscription"
      }
    }
  }
}


6. Case 6: Missing Provider
Description: No subscription (provider) provided.
Mock:

{
  "resource": {
    "azurerm_resource_group": {
      "example": {
        "name": "example-resources",
        "location": "eastus",
        "tags": {
          "creator_id": "authorized.user@company.com"
        }
      }
    }
  }
}



Mapping to Acceptance Criteria
Case	Scenario	Expected Outcome
1	Valid subscription and creator ID	Allow
2	Invalid subscription	Deny
3	Invalid creator ID	Deny
4	Both subscription and creator ID invalid	Deny
5	Missing creator ID	Deny
6	Missing subscription (provider field)	Deny



opa eval --input case1.json --data azure_policy.rego "data.azure.authorization.allow"
