import logging
import json
from azure.identity import DefaultAzureCredential
from azure.mgmt.resource import ResourceManagementClient
from azure.mgmt.compute import ComputeManagementClient
from azure.mgmt.network import NetworkManagementClient
from azure.mgmt.security import SecurityCenter

# Replace with your subscription ID
SUBSCRIPTION_ID = "your-subscription-id"

# Initialize logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize Azure clients
credential = DefaultAzureCredential()
resource_client = ResourceManagementClient(credential, SUBSCRIPTION_ID)
compute_client = ComputeManagementClient(credential, SUBSCRIPTION_ID)
network_client = NetworkManagementClient(credential, SUBSCRIPTION_ID)
security_client = SecurityCenter(credential, SUBSCRIPTION_ID)

# Compliance results to store the report
compliance_results = []


def get_resource_groups():
    """Get all resource groups in the subscription."""
    logger.info("Fetching all resource groups...")
    resource_groups = list(resource_client.resource_groups.list())
    logger.info(f"Found {len(resource_groups)} resource groups.")
    return resource_groups


def list_vms_in_resource_group(resource_group_name):
    """List all VMs in a specific resource group."""
    logger.info(f"Fetching VMs in resource group: {resource_group_name}")
    vms = list(compute_client.virtual_machines.list(resource_group_name))
    logger.info(f"Found {len(vms)} VMs in resource group: {resource_group_name}")
    return vms


def check_defender_vm(vm):
    """Check if Azure Defender for Servers is enabled for the VM."""
    try:
        pricing = security_client.pricings.get("VirtualMachines")
        if pricing.pricing_tier == "Standard":
            logger.info(f"VM {vm.name}: Azure Defender for Servers is enabled.")
            return True
        else:
            logger.warning(f"VM {vm.name}: Azure Defender for Servers is NOT enabled.")
            return False
    except Exception as e:
        logger.error(f"Failed to check Azure Defender for {vm.name}: {e}")
        return False


def check_disk_encryption(vm):
    """Check if OS and data disks are encrypted with customer-managed keys."""
    compliance = True
    try:
        os_disk = vm.storage_profile.os_disk
        if not os_disk.managed_disk or not os_disk.managed_disk.disk_encryption_set:
            logger.warning(f"VM {vm.name}: OS Disk is NOT encrypted with a customer-managed key.")
            compliance = False
        else:
            logger.info(f"VM {vm.name}: OS Disk is encrypted with customer-managed key.")

        for data_disk in vm.storage_profile.data_disks:
            if not data_disk.managed_disk or not data_disk.managed_disk.disk_encryption_set:
                logger.warning(f"VM {vm.name}: Data Disk {data_disk.name} is NOT encrypted with a customer-managed key.")
                compliance = False
            else:
                logger.info(f"VM {vm.name}: Data Disk {data_disk.name} is encrypted with customer-managed key.")
    except Exception as e:
        logger.error(f"Failed to check disk encryption for VM {vm.name}: {e}")
        compliance = False

    return compliance


def check_open_ports(vm, resource_group_name):
    """Check for open management ports."""
    try:
        for nic in vm.network_profile.network_interfaces:
            nic_name = nic.id.split('/')[-1]
            nic_details = network_client.network_interfaces.get(resource_group_name, nic_name)

            for ip_config in nic_details.ip_configurations:
                if ip_config.public_ip_address:
                    logger.warning(f"VM {vm.name}: Open public port detected on NIC {nic_name}.")
                    return False
        logger.info(f"VM {vm.name}: No open public ports detected.")
        return True
    except Exception as e:
        logger.error(f"Failed to check open ports for VM {vm.name}: {e}")
        return False


def check_nsg_rules(resource_group_name, nic_name):
    """Check if NSG rules are compliant for the NIC."""
    try:
        nic = network_client.network_interfaces.get(resource_group_name, nic_name)
        if not nic.network_security_group:
            logger.warning(f"NIC {nic_name} has no NSG associated.")
            return False

        nsg_name = nic.network_security_group.id.split('/')[-1]
        nsg = network_client.network_security_groups.get(resource_group_name, nsg_name)

        compliance = True
        for rule in nsg.security_rules:
            if rule.access == "Allow" and rule.direction == "Inbound":
                logger.warning(f"NSG {nsg_name} has an open inbound rule: {rule.name}")
                compliance = False

        if compliance:
            logger.info(f"NSG {nsg_name} is compliant.")
        return compliance

    except Exception as e:
        logger.error(f"Error checking NSG for NIC {nic_name}: {e}")
        return False


def save_report_to_file(filename, report):
    """Save the compliance report to a file."""
    with open(filename, 'w') as file:
        json.dump(report, file, indent=4)
    logger.info(f"Compliance report saved to {filename}")


def main():
    try:
        # Iterate through all resource groups
        resource_groups = get_resource_groups()
        for rg in resource_groups:
            logger.info(f"\nProcessing Resource Group: {rg.name}")

            # Iterate through all VMs in the resource group
            vms = list_vms_in_resource_group(rg.name)
            for vm in vms:
                logger.info(f"\nChecking VM: {vm.name}")

                # Compliance checks
                compliance = {
                    "VM Name": vm.name,
                    "Resource Group": rg.name,
                    "Azure Defender for Servers": check_defender_vm(vm),
                    "Disk Encryption": check_disk_encryption(vm),
                    "Open Ports": check_open_ports(vm, rg.name),
                    "NSG Rules": all([
                        check_nsg_rules(rg.name, nic.id.split('/')[-1])
                        for nic in vm.network_profile.network_interfaces
                    ]),
                }

                # Add compliance to results
                compliance_results.append(compliance)

                # Output compliance result
                logger.info(f"Compliance Report for VM {vm.name}:")
                for policy, is_compliant in compliance.items():
                    if policy in ["VM Name", "Resource Group"]:
                        continue  # Skip metadata
                    status = "Compliant" if is_compliant else "Non-Compliant"
                    logger.info(f"  {policy}: {status}")

        # Save the report to a file
        save_report_to_file("compliance_report.json", compliance_results)

        # Print a summary table to the console
        print("\nSummary Compliance Report:")
        for result in compliance_results:
            print(f"VM: {result['VM Name']} | Resource Group: {result['Resource Group']} | "
                  f"Defender: {'Compliant' if result['Azure Defender for Servers'] else 'Non-Compliant'} | "
                  f"Disk Encryption: {'Compliant' if result['Disk Encryption'] else 'Non-Compliant'} | "
                  f"Open Ports: {'Compliant' if result['Open Ports'] else 'Non-Compliant'} | "
                  f"NSG Rules: {'Compliant' if result['NSG Rules'] else 'Non-Compliant'}")

    except Exception as e:
        logger.error(f"Unexpected error during execution: {e}")


if __name__ == "__main__":
    main()
