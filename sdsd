import json
import os
from azure.identity import DefaultAzureCredential
from azure.mgmt.subscription import SubscriptionClient
from azure.mgmt.compute import ComputeManagementClient

# Azure credential setup
credential = DefaultAzureCredential()

def get_subscriptions(credential):
    """Fetch all available Azure subscriptions."""
    subscription_client = SubscriptionClient(credential)
    subscriptions = subscription_client.subscriptions.list()
    return [sub.subscription_id for sub in subscriptions]

def fetch_usage_and_quota(subscription_id, regions):
    """Fetch resource usage and quota for specified regions."""
    compute_client = ComputeManagementClient(credential, subscription_id)
    usage_report = {}
    
    for region in regions:
        print(f"  Fetching usage data for region: {region}")
        try:
            usage_list = compute_client.usage.list(region)
            region_data = []

            for usage in usage_list:
                region_data.append({
                    "resource_name": usage.name.localized_value,
                    "current_usage": usage.current_value,
                    "limit": usage.limit,
                    "unit": usage.unit
                })

            usage_report[region] = region_data

        except Exception as e:
            print(f"    Error fetching usage data for region {region}: {e}")
            usage_report[region] = {"error": str(e)}
    
    return usage_report

def main():
    # Define output directory
    output_dir = "vm_quota_usage_reports"
    os.makedirs(output_dir, exist_ok=True)

    # Define regions to check
    regions = ["eastus", "westus", "centralus"]

    # Fetch all subscription IDs
    print("Fetching subscriptions...")
    subscription_ids = get_subscriptions(credential)

    # Iterate through subscriptions
    for sub_id in subscription_ids:
        print(f"Checking subscription: {sub_id}")
        try:
            # Fetch usage and quota per region
            usage_report = fetch_usage_and_quota(sub_id, regions)

            # Save report to a file
            output_file = os.path.join(output_dir, f"quota_usage_report_{sub_id}.json")
            with open(output_file, "w") as f:
                json.dump(usage_report, f, indent=4)

            print(f"  Report saved for subscription {sub_id}: {output_file}")

        except Exception as e:
            print(f"Error processing subscription {sub_id}: {e}")

    print("\nAll reports have been generated successfully!")

if __name__ == "__main__":
    main()
