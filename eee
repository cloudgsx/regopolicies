Guide to Refining Epic Descriptions and Documentation

Objective

This guide provides a structured approach to refining epic descriptions and related documentation. By following these steps, teams can ensure that epics are clear, concise, well-structured, and aligned with acceptance criteria (ACs).

Step 1: Understanding the Epic's Purpose

Before refining an epic, ask the following questions:

What is the main goal of this epic? (e.g., automate deployment, enhance security, optimize workflows)

Who are the key stakeholders? (e.g., developers, DevOps, security teams, product owners)

What are the expected outcomes? (e.g., successful deployment, compliance validation, improved efficiency)

What dependencies must be addressed? (e.g., Terraform configurations, CI/CD pipeline, security policies)

Step 2: Structure the Epic Clearly

A well-structured epic should include the following key sections:

1. Epic Description

Provide a clear and concise summary of the epic.

Define the problem being solved and the high-level approach.

Mention the technologies and integrations involved (e.g., Terraform, Jenkins, CI/CD).

2. Pre-Work Requirements

Outline the prerequisites before starting implementation.

Include documentation, configurations, or design validations needed.

3. Epic Objective

Clearly define the purpose of the epic in a single paragraph.

Ensure it aligns with business goals and technical requirements.

Mention how this epic contributes to efficiency, automation, compliance, or scalability.

4. Key Outcomes

Describe the expected benefits and deliverables.

Focus on measurable outcomes like successful deployments, security compliance, and automation efficiency.

5. Scope of Work

Break down the work into actionable steps:

Infrastructure setup (e.g., Terraform updates, CI/CD pipeline integration)

Configuration and automation (e.g., updating IAM policies, networking settings)

Validation and testing (e.g., security checks, governance compliance verification)

Deployment execution and monitoring

Step 3: Align with Acceptance Criteria (ACs)

To ensure the epic meets all technical and business requirements:

Review each AC carefully and check if the epic description addresses it.

If an AC mentions a dependency (e.g., SPNs, Terraform workspaces), make sure it is covered in the epic.

Validate that all required technical details (e.g., RBAC, networking settings, CI/CD configurations) are explicitly mentioned.

Step 4: Make the Epic Actionable

Ensure that team members can easily execute the work by:

Using clear, unambiguous language.

Avoiding vague terms like "optimize," "improve," or "ensure"—instead, be specific.

Breaking down work into smaller, manageable tasks.

Adding relevant links to documentation, repositories, or tools.

Step 5: Review and Iterate

Before finalizing an epic:

Conduct a peer review within the team.

Ensure technical feasibility and alignment with project goals.

Verify dependencies and pre-requisites.

Iterate based on feedback.

Checklist for a Well-Refined Epic

✅ Clear and concise problem statement
✅ Structured format with key sections
✅ Aligned with all acceptance criteria (ACs)
✅ Actionable scope of work with specific tasks
✅ No vague or ambiguous language
✅ Includes all relevant dependencies and prerequisites
✅ Peer-reviewed and approved

By following this guide, teams can create high-quality, well-structured epics that facilitate smoother implementation and better collaboration across teams.
