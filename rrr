Terraform: Launch a Private EC2 Instance with SSM Session Manager (Least-Privilege)

Goal
Stand up an Ubuntu EC2 instance in a private subnet (no public IP) and connect to it with AWS Systems Manager Session Manager.
We’ll create:

A minimal IAM policy that lets admins start/resume/terminate SSM sessions only on instances tagged to allow it.

An EC2 instance role/profile with AmazonSSMManagedInstanceCore.

An admin role you assume (via IAM user or SSO) that has the minimal SSM Session permissions.

Data sources to dynamically pick VPC subnets and the latest Ubuntu AMI.

Architecture at a Glance

Networking: private subnets only (no public IP). Instance reaches SSM via NAT or VPC Interface Endpoints (ssm, ssmmessages, ec2messages).

Access: You connect through Session Manager; no SSH keys or open ports.

Guardrail: SSM session actions are allowed only when the instance carries a tag SSMSession=allowed.

Files & Variables

All code below can live in a single main.tf, or split as you prefer.

Variables you’ll need somewhere (variables.tf or inline defaults):

variable "instance_type"      { type = string  default = "t3.micro" }
variable "root_volume_size"   { type = number  default = 16 }
variable "sg_id"              { type = string }            # Existing SG to attach
variable "org_id"             { type = string }            # Your AWS Organizations ID (o-xxxx)
variable "ubuntu_owner"       { type = string  default = "099720109477" } # Canonical

1) Minimal SSM Session Policy (attached to the admin role)
resource "aws_iam_policy" "ssm_session_minimal" {
  name        = "SSMStartSessionMinimal"
  description = "Minimal permissions to start SSM sessions to tagged EC2 instances"

  policy = jsonencode({
    Version   = "2012-10-17"
    Statement = [
      {
        Sid       = "StartResumeTerminateOnTaggedInstances"
        Effect    = "Allow"
        Action    = ["ssm:StartSession", "ssm:ResumeSession", "ssm:TerminateSession"]
        Resource  = "arn:aws:ec2:*:*:instance/*"
        Condition = {
          StringEquals = { "ssm:resourceTag/SSMSession" = "allowed" }
        }
      },
      {
        Sid    = "DescribeForConsole"
        Effect = "Allow"
        Action = [
          "ssm:DescribeInstanceInformation",
          "ssm:DescribeSessions",
          "ssm:GetConnectionStatus",
          "ec2:DescribeInstances",
          "ec2:DescribeTags"
        ]
        Resource = "*"
      }
    ]
  })
}

Why this matters

The condition key (ssm:resourceTag/SSMSession = allowed) enforces least privilege: even if an admin has this policy, they can only open a session to instances you explicitly tag.

Read-only “Describe” calls power the Session Manager console & CLI UX.

2) Discover VPCs & Private Subnets Dynamically
# Fetch all VPC IDs in the region (optional output)
data "aws_vpcs" "all_vpcs" {}

output "all_vpc_ids" {
  value = data.aws_vpcs.all_vpcs.ids
}

# Select private subnets by Name tag
data "aws_subnets" "private_subnets" {
  filter {
    name   = "tag:Name"
    values = [
      "aft_lab_private_usw2-az1",
      "aft_lab_private_usw2-az2",
      "aft_lab_private_usw2-az3",
    ]
  }
}

Notes

Replace the values with your private subnet names (or switch to a tag:Tier=private style filter if that’s your convention).

3) EC2 Instance Role & Instance Profile
# Role the instance will assume (for SSM agent to work)
resource "aws_iam_role" "ec2_ssm_role" {
  name = "ec2-ssm-role-helper-instance"
  assume_role_policy = jsonencode({
    Version   = "2012-10-17"
    Statement = [{
      Effect    = "Allow"
      Principal = { Service = "ec2.amazonaws.com" }
      Action    = "sts:AssumeRole"
    }]
  })
}

# Managed policy required by SSM Agent (includes SSM, EC2Messages, CloudWatch agent basics)
resource "aws_iam_role_policy_attachment" "ec2_ssm_core" {
  role       = aws_iam_role.ec2_ssm_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
}

# Instance profile wrapper
resource "aws_iam_instance_profile" "ec2_ssm_profile" {
  name = "ec2-ssm-instance-profile"
  role = aws_iam_role.ec2_ssm_role.name
}

4) Admin/User Role You Assume + Attach the Minimal SSM Policy
resource "aws_iam_role" "admin_role" {
  name = "ssm-session-admin"

  # Choose ONE trust policy that matches how you log in.
  # Example: allow principals from your AWS Organization (good guardrail).
  assume_role_policy = jsonencode({
    Version   = "2012-10-17"
    Statement = [{
      Effect    = "Allow"
      Principal = { AWS = "arn:aws:iam::${data.aws_caller_identity.current.account_id}:root" }
      Action    = "sts:AssumeRole"
      Condition = {
        StringEquals = { "aws:PrincipalOrgID" = var.org_id }
      }
    }]
  })
}

data "aws_caller_identity" "current" {}

resource "aws_iam_role_policy_attachment" "attach_ssm_minimal_to_admin" {
  role       = aws_iam_role.admin_role.name
  policy_arn = aws_iam_policy.ssm_session_minimal.arn
}

Notes

If you use AWS IAM Identity Center (SSO), set Principal to the SSO role ARN(s).

The aws:PrincipalOrgID condition ensures only identities from your Organization can assume the role, even if the trust is broad.

5) Fetch the Latest Ubuntu AMI
data "aws_ami" "ubuntu" {
  most_recent = true
  owners      = [var.ubuntu_owner]   # Canonical

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-*-20.04-amd64-server-*"] # tweak to your distro/version
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }
}


Adjust the name pattern for your preferred Ubuntu release.

6) Launch the Private EC2 Instance
resource "aws_instance" "ec2_instance" {
  ami                         = data.aws_ami.ubuntu.id
  instance_type               = var.instance_type
  subnet_id                   = data.aws_subnets.private_subnets.ids[0]
  iam_instance_profile        = aws_iam_instance_profile.ec2_ssm_profile.name
  associate_public_ip_address = false
  vpc_security_group_ids      = [var.sg_id]

  # Enable sessions only when explicitly tagged
  tags = {
    Name        = "aft_lab"
    SSMSession  = "allowed"   # <-- required by the policy condition
  }

  root_block_device {
    volume_size = var.root_volume_size
    volume_type = "gp3"       # use "gp2" if you need older default
  }
}

Why these settings?

associate_public_ip_address = false keeps the host private.

The SSMSession=allowed tag is the switch that lets admins start a session.

How to Use

Plan & apply

terraform init
terraform plan
terraform apply


Assume the admin role (via SSO or aws sts assume-role ...).

Start a session:

aws ssm start-session --target <instance-id>


Or use the AWS Console → Systems Manager → Session Manager.

Networking Requirements

Your private instance must reach SSM endpoints. Choose one:

NAT Gateway in the route table for private subnets, or

VPC Interface Endpoints (recommended for truly private):

com.amazonaws.<region>.ssm

com.amazonaws.<region>.ssmmessages

com.amazonaws.<region>.ec2messages

Open your SG/NACLs accordingly for those endpoints (they’re inside the VPC).

Troubleshooting

Session won’t start

Instance must have the instance profile with AmazonSSMManagedInstanceCore.

SSM Agent must be installed/running (preinstalled on recent Ubuntu AMIs).

Networking: verify NAT or VPC endpoints.

Check the tag: SSMSession=allowed. Without it, the admin policy denies sessions.

Can’t assume admin role

Verify the trust policy principal(s) and, if used, the aws:PrincipalOrgID value (var.org_id).

Ubuntu AMI not found

Ensure owners is Canonical’s account and the name filter matches your target release.

Security Considerations

Least privilege by tag: Only tagged instances are session-eligible.

No SSH: Avoids key management and exposed ports.

Scoped trust: Use Organization guardrails or explicit SSO role ARNs in the admin role trust policy.

Audit: Session Manager logs and session recordings can be routed to CloudWatch Logs or S3 (add later if desired).

Optional Enhancements

Add Session Manager logging to S3/CloudWatch.

Create SG and VPC Endpoints in Terraform for a fully private pattern.

Parameterize subnet tag filters, instance name, and AMI stream via variables.

Use an IAM permission boundary or SCPs to enforce the SSMSession tag pattern org-wide.

Clean Up
terraform destroy


This removes the instance, roles, policies, and attachments created by this module.

Appendix — Full Flow Summary

Discover private subnets → 2) Create EC2 role/profile with SSM core → 3) Create admin role and attach minimal SSM policy → 4) Launch Ubuntu instance in private subnet with SSMSession=allowed tag → 5) Connect via Session Manager.
