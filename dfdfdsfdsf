2. Detect Errors Before Resource Creation
To prevent Terraform from attempting the resource creation altogether, validate the capacity availability before deployment using the Azure CLI or Terraform data sources.

Example:
hcl
Copiar c√≥digo
resource "null_resource" "check_capacity" {
  provisioner "local-exec" {
    command = <<EOT
      echo "Checking Azure capacity for VM size..."
      az vm list-skus --location <region> --query "[?name=='Standard_L8s_v3']" | grep -q '"zones":'
      if [ $? -ne 0 ]; then
        echo "No available capacity for Standard_L8s_v3 in this region. Halting deployment."
        exit 1
      fi
    EOT
  }
}

resource "azurerm_linux_virtual_machine" "vm" {
  depends_on          = [null_resource.check_capacity]
  name                = "example-vm"
  resource_group_name = azurerm_resource_group.example.name
  location            = azurerm_resource_group.example.location
  size                = "Standard_L8s_v3"

  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  admin_username      = "adminuser"
  network_interface_ids = [azurerm_network_interface.example.id]
}
Explanation of Changes:
Azure CLI Check:

Runs the Azure CLI command az vm list-skus to check for available capacity for Standard_L8s_v3.
If no capacity is found, it fails immediately with exit 1.
depends_on:

Ensures the VM creation only proceeds if the capacity check succeeds.
