from azure.identity import DefaultAzureCredential
from azure.mgmt.policyinsights import PolicyInsightsClient
from azure.mgmt.policyinsights.models import QueryResultsFilter
import logging
import pandas as pd

# Initialize logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize credentials
credential = DefaultAzureCredential()
policy_insights_client = PolicyInsightsClient(credential)

def get_policy_compliance_for_management_group(management_group_name):
    """Get compliance data for a management group."""
    try:
        logger.info(f"Fetching compliance data for management group: {management_group_name}")

        # Summarize policy compliance for the management group
        results = policy_insights_client.policy_states.summarize_for_management_group(
            management_group_name=management_group_name
        )

        return results.value  # List of policy summaries
    except Exception as e:
        logger.error(f"Failed to fetch compliance data for management group: {e}")
        return []

def summarize_compliance(management_group_name):
    """Generate compliance summaries for all policies in the initiative."""
    policies = get_policy_compliance_for_management_group(management_group_name)

    if not policies:
        logger.error("No compliance data found.")
        return []

    summary = []

    for policy in policies:
        policy_name = policy.policy_definition_name
        policy_id = policy.policy_definition_id
        compliant_resources = policy.results.get("compliantResources", 0)
        non_compliant_resources = policy.results.get("nonCompliantResources", 0)
        total_resources = policy.results.get("totalResources", 0)

        logger.info(f"Policy: {policy_name}")
        logger.info(f"  Total resources: {total_resources}")
        logger.info(f"  Non-compliant resources: {non_compliant_resources}")

        summary.append({
            "Policy Name": policy_name,
            "Policy ID": policy_id,
            "Total Resources": total_resources,
            "Non-Compliant Resources": non_compliant_resources
        })

    return summary

def save_to_csv(data, filename="compliance_summary.csv"):
    """Save compliance summary to a CSV file."""
    if not data:
        logger.warning("No data to save.")
        return

    df = pd.DataFrame(data)
    df.to_csv(filename, index=False)
    logger.info(f"Compliance summary saved to {filename}.")

def main():
    MANAGEMENT_GROUP_NAME = "98-root"  # Replace with your management group name

    logger.info("Starting compliance summary generation...")
    compliance_data = summarize_compliance(MANAGEMENT_GROUP_NAME)

    if compliance_data:
        # Print a summary to the console
        print("\nCompliance Summary:")
        print(pd.DataFrame(compliance_data))

        # Save to a CSV file
        save_to_csv(compliance_data)
    else:
        logger.warning("No compliance data found.")

if __name__ == "__main__":
    main()
