import json
import os
from azure.identity import DefaultAzureCredential
from azure.mgmt.resourcegraph import ResourceGraphClient
from azure.mgmt.subscription import SubscriptionClient

# Azure credential setup
credential = DefaultAzureCredential()

def get_subscriptions(credential):
    """Fetch all available Azure subscriptions."""
    subscription_client = SubscriptionClient(credential)
    subscriptions = subscription_client.subscriptions.list()
    return [sub.subscription_id for sub in subscriptions]

def query_subscription_quota_and_usage(subscription_id):
    """Query Resource Graph for compute resource quotas and usage for a subscription."""
    resource_graph_client = ResourceGraphClient(credential)
    query = """
    Resources
    | where type =~ "Microsoft.Compute/locations/usages"
    | project subscriptionId, location, name = properties.name.value, limit = properties.limit, currentValue = properties.currentValue
    """
    # Execute the query for the specific subscription
    result = resource_graph_client.resources({
        "subscriptions": [subscription_id],
        "query": query
    })
    return result.data

def main():
    # Define output directory
    output_dir = "vm_quota_usage_reports"
    os.makedirs(output_dir, exist_ok=True)

    # Fetch all subscription IDs
    print("Fetching subscriptions...")
    subscription_ids = get_subscriptions(credential)

    # Iterate through subscriptions and generate individual reports
    for sub_id in subscription_ids:
        print(f"Checking subscription: {sub_id}")
        try:
            usage_data = query_subscription_quota_and_usage(sub_id)

            # Format data for report
            report = []
            for item in usage_data:
                report.append({
                    "location": item["location"],
                    "resource_name": item["name"],
                    "current_usage": item["currentValue"],
                    "limit": item["limit"]
                })

            # Save report to individual file
            output_file = os.path.join(output_dir, f"quota_usage_report_{sub_id}.json")
            with open(output_file, "w") as f:
                json.dump(report, f, indent=4)

            print(f"  Report saved for subscription {sub_id}: {output_file}")

        except Exception as e:
            print(f"  Error fetching data for subscription {sub_id}: {e}")

    print("\nAll reports have been generated successfully!")

if __name__ == "__main__":
    main()
