This document describes the steps required to deploy infrastructure changes on the AWS Lab account using CodePipeline and GitHub integration.

Prerequisites

Access to the AWS Lab account:
Account ID: 373430258241

Access to the GitHub repository:
74017_account-customizations

Permissions to create pull requests (PR) and trigger pipelines.

Last commit ID from your working branch.


Step 1: Prepare Your Branch

Make code changes in your feature branch.

Raise a Pull Request (PR) against the DEV branch.

Ensure that your branch is up-to-date with DEV.

If it is not, you will see a warning.

In that case, sync/merge the latest DEV changes into your branch.

Example PR Checks:

Changes approved by reviewers with write access.

Some checks may still be queued.

Merging might be blocked if you are not authorized to push directly.



Step 2: Trigger the Pipeline

Navigate to AWS Console → CodePipeline:
AWS CodePipeline Console

Locate the pipeline:
aft-account-customizations-plan-only

Click Release change.

This will prompt you to enter Pipeline variables:

VENDOR_ACCOUNT_ID → Enter target account ID.

TF_LOG_CORE → Default: OFF

TF_LOG_PROVIDER → Default: OFF

TF_INPUT → Default: 0

Commit ID → Enter your last commit ID.

Click Release.

Step 3: Confirm Pipeline Execution

Once the change is released, a new pipeline run will be triggered.

A success message will confirm:

"The execution will run through the pipeline. For PARALLEL mode, go here: <pipeline-execution-id>"

Click the link to open the execution details.

Step 4: Monitor Pipeline Progress

Open the Pipeline execution view:

Example Execution ID: 303b9084-9ea4-438b-abb0-59bad1291967

View stages such as Source → Build → Deploy (Plan).

In the Execution summary, check status:

In progress → still running.

Succeeded → pipeline completed successfully.

Failed → check logs for details.

Step 5: Review Terraform Plan

Once the Plan stage completes, verify that the output includes your changes.
Example Terraform output:

# aws_instance.ec2_instance will be created
+ resource "aws_instance" "ec2_instance" {
    + ami                          = "ami-05e7efxxxxxxx"
    + associate_public_ip_address  = (known after apply)
    + cpu_core_count               = (known after apply)
    + instance_type                = "t3.micro"
    + tags                         = {
        + "Name" = "TestInstance"
      }
  }


Ensure all intended resources (additions, updates, deletions) are listed correctly.

Step 6: Validate Success

Confirm that the pipeline execution status is "Succeeded".

Ensure that the Terraform plan output reflects the changes you intended to make.

Troubleshooting

Merging Blocked:
Ensure your PR is approved and branch is up-to-date with DEV.

Pipeline Failure:

Check detailed logs in CodePipeline.

Validate that commit ID and pipeline variables are correct.

Terraform Errors:

Review the Terraform plan output for misconfigured variables or missing resources.

References

GitHub Repo: 74017_account-customizations

AWS CodePipeline Console: Link

AWS Docs: CodePipeline Documentation

✅ Following this process ensures smooth deployment of infrastructure changes to the AWS Lab account using CodePipeline.
