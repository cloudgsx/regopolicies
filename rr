#!/usr/bin/env python3
"""
EC2 Metadata to S3 Script
Fetches EC2 instance metadata and uploads it to S3
"""

import urllib.request
import json
import boto3
from datetime import datetime
import sys

def get_metadata(path):
    """Fetch metadata from EC2 instance metadata service (IMDSv2)"""
    try:
        # First, get a token for IMDSv2
        token_url = "http://169.254.169.254/latest/api/token"
        token_request = urllib.request.Request(
            token_url,
            headers={"X-aws-ec2-metadata-token-ttl-seconds": "21600"},
            method="PUT"
        )
        
        with urllib.request.urlopen(token_request, timeout=2) as response:
            token = response.read().decode('utf-8')
        
        # Now fetch the metadata using the token
        metadata_url = f"http://169.254.169.254/latest/meta-data/{path}"
        metadata_request = urllib.request.Request(
            metadata_url,
            headers={"X-aws-ec2-metadata-token": token}
        )
        
        with urllib.request.urlopen(metadata_request, timeout=2) as response:
            return response.read().decode('utf-8')
            
    except Exception as e:
        return f"Error: {str(e)}"

def collect_metadata():
    """Collect various metadata fields"""
    metadata = {
        "collection_timestamp": datetime.utcnow().isoformat() + "Z",
        "instance_id": get_metadata('instance-id'),
        "instance_type": get_metadata('instance-type'),
        "availability_zone": get_metadata('placement/availability-zone'),
        "region": get_metadata('placement/region'),
        "ami_id": get_metadata('ami-id'),
        "hostname": get_metadata('hostname'),
        "local_ipv4": get_metadata('local-ipv4'),
        "public_ipv4": get_metadata('public-ipv4'),
        "security_groups": get_metadata('security-groups'),
    }
    
    return metadata

def upload_to_s3(bucket_name, metadata):
    """Upload metadata to S3 bucket"""
    try:
        s3_client = boto3.client('s3')
        
        # Create filename with timestamp
        timestamp = datetime.utcnow().strftime('%Y%m%d_%H%M%S')
        instance_id = metadata.get('instance_id', 'unknown')
        filename = f"metadata/{instance_id}/{timestamp}.json"
        
        # Convert metadata to JSON
        json_data = json.dumps(metadata, indent=2)
        
        # Upload to S3
        s3_client.put_object(
            Bucket=bucket_name,
            Key=filename,
            Body=json_data,
            ContentType='application/json'
        )
        
        print(f"✓ Metadata uploaded successfully to s3://{bucket_name}/{filename}")
        return True
        
    except Exception as e:
        print(f"✗ Error uploading to S3: {str(e)}")
        return False

def main():
    # Check if bucket name provided
    if len(sys.argv) < 2:
        print("Usage: python3 metadata_to_s3.py <s3-bucket-name>")
        sys.exit(1)
    
    bucket_name = sys.argv[1]
    
    print("Collecting EC2 metadata...")
    metadata = collect_metadata()
    
    print("\nCollected Metadata:")
    print(json.dumps(metadata, indent=2))
    
    print(f"\nUploading to S3 bucket: {bucket_name}")
    success = upload_to_s3(bucket_name, metadata)
    
    if success:
        sys.exit(0)
    else:
        sys.exit(1)

if __name__ == '__main__':
    main()
