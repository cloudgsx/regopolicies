package azure_keyvault_rbac

# Deny if there is an unauthorized role access to the Key Vault
deny[msg] {
    resource := input.plan.resource_changes[_]
    resource.type == "azurerm_key_vault"
    access_policies := resource.change.after.access_policies
    policy := access_policies[_]
    not policy.permissions.keys[_] == "Get"
    msg := sprintf("Unauthorized access: Object ID %v has invalid permissions.", [policy.object_id])
}

# Deny if key rotation period exceeds 1 year
deny[msg] {
    resource := input.plan.resource_changes[_]
    resource.type == "azurerm_key_vault_key"
    rotation_policy := resource.change.after.rotation_policy
    not rotation_policy.enabled
    msg := sprintf("Key rotation is not enabled for Key Vault Key: %v", [resource.change.after.name])
}

deny[msg] {
    resource := input.plan.resource_changes[_]
    resource.type == "azurerm_key_vault_key"
    rotation_policy := resource.change.after.rotation_policy
    rotation_policy.lifetime_actions[_].trigger.time_after_create > "P365D"
    msg := sprintf("Key rotation exceeds 1 year for Key Vault Key: %v", [resource.change.after.name])
}

# Deny if key configuration settings are invalid (e.g., key type or size)
deny[msg] {
    resource := input.plan.resource_changes[_]
    resource.type == "azurerm_key_vault_key"
    key_settings := resource.change.after
    not key_settings.key_size >= 2048
    msg := sprintf("Key size for Key Vault Key %v is less than 2048 bits.", [key_settings.name])
}

deny[msg] {
    resource := input.plan.resource_changes[_]
    resource.type == "azurerm_key_vault_key"
    key_settings := resource.change.after
    not key_settings.key_type == "RSA"
    msg := sprintf("Key type for Key Vault Key %v is not RSA.", [key_settings.name])
}

# Deny if key version management is not enabled
deny[msg] {
    resource := input.plan.resource_changes[_]
    resource.type == "azurerm_key_vault_key"
    not resource.change.after.versioned
    msg := sprintf("Key Vault Key %v is not versioned.", [resource.change.after.name])
}

# Ensure integration with key management process
deny[msg] {
    resource := input.plan.resource_changes[_]
    resource.type == "azurerm_key_vault"
    role_assignments := resource.change.after.role_assignments
    not count(role_assignments) > 0
    msg := sprintf("Key Vault %v has no role assignments for key management.", [resource.change.after.name])
}

# Enforce rotation schedule visibility
deny[msg] {
    resource := input.plan.resource_changes[_]
    resource.type == "azurerm_key_vault_key"
    rotation_policy := resource.change.after.rotation_policy
    not rotation_policy.lifetime_actions[_].action == "rotate"
    msg := sprintf("Rotation schedule is not defined for Key Vault Key: %v", [resource.change.after.name])
}
