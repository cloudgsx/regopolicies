import logging
from azure.identity import DefaultAzureCredential
from azure.mgmt.resource import ResourceManagementClient
from azure.mgmt.compute import ComputeManagementClient
from azure.mgmt.network import NetworkManagementClient
from azure.mgmt.security import SecurityCenter

# Replace with your subscription ID
SUBSCRIPTION_ID = "your-subscription-id"

# Initialize logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize Azure clients
credential = DefaultAzureCredential()
resource_client = ResourceManagementClient(credential, SUBSCRIPTION_ID)
compute_client = ComputeManagementClient(credential, SUBSCRIPTION_ID)
network_client = NetworkManagementClient(credential, SUBSCRIPTION_ID)
security_client = SecurityCenter(credential, SUBSCRIPTION_ID)


def get_resource_group_name_from_vm_id(vm_id):
    """Extract the resource group name from the VM ID."""
    try:
        return vm_id.split("/")[4]
    except IndexError:
        logger.error(f"Unable to extract resource group from VM ID: {vm_id}")
        return None


def check_defender_vm(vm):
    """Check if Azure Defender for Servers is enabled for the VM."""
    try:
        pricing = security_client.pricings.get("VirtualMachines")
        if pricing.pricing_tier == "Standard":
            logger.info(f"VM {vm.name}: Azure Defender for Servers is enabled.")
            return True
        else:
            logger.warning(f"VM {vm.name}: Azure Defender for Servers is NOT enabled.")
            return False
    except Exception as e:
        logger.error(f"Failed to check Azure Defender for {vm.name}: {e}")
        return False


def check_disk_encryption(vm, resource_group_name):
    """Check if OS and data disks are encrypted with customer-managed keys."""
    compliance = True
    try:
        os_disk = vm.storage_profile.os_disk
        if not os_disk.managed_disk or not os_disk.managed_disk.disk_encryption_set:
            logger.warning(f"VM {vm.name}: OS Disk is NOT encrypted with a customer-managed key.")
            compliance = False
        else:
            logger.info(f"VM {vm.name}: OS Disk is encrypted with customer-managed key.")

        for data_disk in vm.storage_profile.data_disks:
            if not data_disk.managed_disk or not data_disk.managed_disk.disk_encryption_set:
                logger.warning(f"VM {vm.name}: Data Disk {data_disk.name} is NOT encrypted with a customer-managed key.")
                compliance = False
            else:
                logger.info(f"VM {vm.name}: Data Disk {data_disk.name} is encrypted with customer-managed key.")
    except Exception as e:
        logger.error(f"Failed to check disk encryption for VM {vm.name}: {e}")
        compliance = False

    return compliance


def check_nsg_rules(resource_group_name, nic_name):
    """Check if NSG rules are compliant for the NIC."""
    try:
        nic = network_client.network_interfaces.get(resource_group_name, nic_name)
        if not nic.network_security_group:
            logger.warning(f"NIC {nic_name} has no NSG associated.")
            return False

        nsg_name = nic.network_security_group.id.split('/')[-1]
        nsg = network_client.network_security_groups.get(resource_group_name, nsg_name)

        compliance = True
        for rule in nsg.security_rules:
            if rule.access == "Allow" and rule.direction == "Inbound":
                logger.warning(f"NSG {nsg_name} has an open inbound rule: {rule.name}")
                compliance = False

        if compliance:
            logger.info(f"NSG {nsg_name} is compliant.")
        return compliance

    except Exception as e:
        logger.error(f"Error checking NSG for NIC {nic_name}: {e}")
        return False


def main():
    try:
        # List all VMs across all resource groups
        for vm in compute_client.virtual_machines.list_all():
            resource_group_name = get_resource_group_name_from_vm_id(vm.id)
            if not resource_group_name:
                continue

            logger.info(f"\nChecking VM: {vm.name} in resource group: {resource_group_name}")

            compliance = {
                "Azure Defender for Servers": check_defender_vm(vm),
                "Disk Encryption": check_disk_encryption(vm, resource_group_name),
                "NSG Rules": all([
                    check_nsg_rules(resource_group_name, nic.id.split('/')[-1])
                    for nic in vm.network_profile.network_interfaces
                ]),
            }

            logger.info(f"\nCompliance Report for VM {vm.name}:")
            for policy, is_compliant in compliance.items():
                status = "Compliant" if is_compliant else "Non-Compliant"
                logger.info(f"  {policy}: {status}")
    except Exception as e:
        logger.error(f"Unexpected error during execution: {e}")


if __name__ == "__main__":
    main()
