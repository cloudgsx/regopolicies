from azure.identity import DefaultAzureCredential
from azure.mgmt.resource import ResourceManagementClient
from azure.mgmt.compute import ComputeManagementClient
from azure.mgmt.network import NetworkManagementClient
from azure.mgmt.security import SecurityCenter

# Replace with your subscription ID
SUBSCRIPTION_ID = "your-subscription-id"

# Initialize Azure clients
credential = DefaultAzureCredential()
resource_client = ResourceManagementClient(credential, SUBSCRIPTION_ID)
compute_client = ComputeManagementClient(credential, SUBSCRIPTION_ID)
network_client = NetworkManagementClient(credential, SUBSCRIPTION_ID)
security_client = SecurityCenter(credential, SUBSCRIPTION_ID)

def get_resource_group_name_from_vm_id(vm_id):
    """Extract the resource group name from the VM ID."""
    return vm_id.split("/")[4]

def check_defender_vm(vm):
    """Check if Azure Defender for Servers is enabled for the VM."""
    try:
        # Check Azure Defender pricing at the subscription level
        pricing = security_client.pricings.get("VirtualMachines")
        if pricing.pricing_tier == "Standard":
            print(f"VM {vm.name}: Azure Defender for Servers is enabled.")
            return True
        else:
            print(f"VM {vm.name}: Azure Defender for Servers is NOT enabled.")
            return False
    except Exception as e:
        print(f"Failed to check Azure Defender for {vm.name}: {e}")
        return False


def check_disk_encryption(vm, resource_group_name):
    """Check if OS and data disks are encrypted with customer-managed keys."""
    compliance = True
    os_disk = vm.storage_profile.os_disk
    if not os_disk.managed_disk or not os_disk.managed_disk.disk_encryption_set:
        print(f"VM {vm.name}: OS Disk is NOT encrypted with a customer-managed key.")
        compliance = False
    else:
        print(f"VM {vm.name}: OS Disk is encrypted with customer-managed key.")

    for data_disk in vm.storage_profile.data_disks:
        if not data_disk.managed_disk or not data_disk.managed_disk.disk_encryption_set:
            print(f"VM {vm.name}: Data Disk {data_disk.name} is NOT encrypted with a customer-managed key.")
            compliance = False
        else:
            print(f"VM {vm.name}: Data Disk {data_disk.name} is encrypted with customer-managed key.")
    return compliance

def check_open_ports(vm, resource_group_name):
    """Check for open management ports."""
    for nic in vm.network_profile.network_interfaces:
        nic_name = nic.id.split('/')[-1]
        nic_details = network_client.network_interfaces.get(resource_group_name, nic_name)
        for ip_config in nic_details.ip_configurations:
            if ip_config.public_ip_address:
                print(f"VM {vm.name}: Open public port detected.")
                return False
    return True

def check_nsg_rules(resource_group_name, nic_name):
    """Check if NSG rules are compliant for the NIC."""
    try:
        # Get NIC details
        nic = network_client.network_interfaces.get(resource_group_name, nic_name)
        
        # Check if an NSG is associated with the NIC
        if not nic.network_security_group:
            print(f"NIC {nic_name} has no NSG associated.")
            return False
        
        # Retrieve the NSG name
        nsg_name = nic.network_security_group.id.split('/')[-1]
        
        # Get NSG details
        nsg = network_client.network_security_groups.get(resource_group_name, nsg_name)
        
        # Validate NSG rules
        compliance = True
        for rule in nsg.security_rules:
            if rule.access == "Allow" and rule.direction == "Inbound":
                print(f"NSG {nsg_name} has an open inbound rule: {rule.name}")
                compliance = False
        
        if compliance:
            print(f"NSG {nsg_name} is compliant.")
        return compliance

    except Exception as e:
        print(f"Error checking NSG for NIC {nic_name}: {e}")
        return False


def main():
    # List all VMs across all resource groups
    for vm in compute_client.virtual_machines.list_all():
        resource_group_name = get_resource_group_name_from_vm_id(vm.id)
        print(f"\nChecking VM: {vm.name} in resource group: {resource_group_name}")

        compliance = {
            "Azure Defender for Servers": check_defender_vm(vm),
            "Disk Encryption": check_disk_encryption(vm, resource_group_name),
            "Open Ports": check_open_ports(vm, resource_group_name),
            "NSG Rules": all([
                check_nsg_rules(resource_group_name, nic.id.split('/')[-1])
                for nic in vm.network_profile.network_interfaces
            ]),
        }
        
        print(f"\nCompliance Report for VM {vm.name}:")
        for policy, is_compliant in compliance.items():
            status = "Compliant" if is_compliant else "Non-Compliant"
            print(f"  {policy}: {status}")



if __name__ == "__main__":
    main()
