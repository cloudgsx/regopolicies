from azure.identity import DefaultAzureCredential
from azure.mgmt.resource import ResourceManagementClient
from azure.mgmt.compute import ComputeManagementClient
from azure.mgmt.network import NetworkManagementClient
from azure.mgmt.security import SecurityCenter

# Replace with your subscription ID
SUBSCRIPTION_ID = "your-subscription-id"

# Initialize Azure clients
credential = DefaultAzureCredential()
resource_client = ResourceManagementClient(credential, SUBSCRIPTION_ID)
compute_client = ComputeManagementClient(credential, SUBSCRIPTION_ID)
network_client = NetworkManagementClient(credential, SUBSCRIPTION_ID)
security_client = SecurityCenter(credential, SUBSCRIPTION_ID)

def enable_defender_for_servers():
    """Enable Azure Defender for Servers at the subscription level."""
    try:
        pricing = security_client.pricings.create_or_update(
            resource_type="VirtualMachines",  # Correct resource type for servers
            pricing_tier="Standard"
        )
        print(f"Azure Defender for Servers enabled: {pricing.pricing_tier}")
    except Exception as e:
        print(f"Failed to enable Azure Defender for Servers: {e}")

def check_defender_status():
    """Check if Azure Defender for Servers is enabled."""
    try:
        pricing = security_client.pricings.get("VirtualMachines")
        if pricing.pricing_tier == "Standard":
            print("Azure Defender for Servers is enabled.")
            return True
        else:
            print("Azure Defender for Servers is NOT enabled.")
            return False
    except Exception as e:
        print(f"Failed to check Azure Defender for Servers status: {e}")
        return False

def check_disk_encryption(vm):
    """Check if OS and data disks are encrypted with customer-managed keys."""
    compliance = True
    os_disk = vm.storage_profile.os_disk
    if not os_disk.managed_disk or not os_disk.managed_disk.disk_encryption_set:
        print(f"VM {vm.name}: OS Disk is NOT encrypted with a customer-managed key.")
        compliance = False
    else:
        print(f"VM {vm.name}: OS Disk is encrypted with customer-managed key.")

    for data_disk in vm.storage_profile.data_disks:
        if not data_disk.managed_disk or not data_disk.managed_disk.disk_encryption_set:
            print(f"VM {vm.name}: Data Disk {data_disk.name} is NOT encrypted with a customer-managed key.")
            compliance = False
        else:
            print(f"VM {vm.name}: Data Disk {data_disk.name} is encrypted with customer-managed key.")
    return compliance

def check_open_ports(vm):
    """Check for open management ports."""
    for nic in vm.network_profile.network_interfaces:
        nic_name = nic.id.split('/')[-1]
        nic_details = network_client.network_interfaces.get(vm.resource_group_name, nic_name)
        for ip_config in nic_details.ip_configurations:
            if ip_config.public_ip_address:
                print(f"VM {vm.name}: Open public port detected.")
                return False
    return True

def check_nsg_rules(resource_group_name, nic_name):
    """Check if NSG rules are compliant for the NIC."""
    compliance = True
    nic = network_client.network_interfaces.get(resource_group_name, nic_name)
    if nic.network_security_group:
        nsg_name = nic.network_security_group.id.split('/')[-1]
        nsg = network_client.network_security_groups.get(resource_group_name, nsg_name)
        for rule in nsg.security_rules:
            if rule.access == "Allow" and rule.direction == "Inbound":
                print(f"NSG {nsg_name} has an open inbound rule: {rule.name}")
                compliance = False
    else:
        print(f"NIC {nic_name} has no NSG associated.")
        compliance = False
    return compliance

def main():
    # Enable Azure Defender for Servers
    enable_defender_for_servers()

    # List all resource groups
    for rg in resource_client.resource_groups.list():
        print(f"\nResource Group: {rg.name}")
        
        # List VMs in the resource group
        for vm in compute_client.virtual_machines.list(rg.name):
            print(f"\nChecking VM: {vm.name}")

            compliance = {
                "Disk Encryption": check_disk_encryption(vm),
                "Azure Defender for Servers": check_defender_status(),
                "Open Ports": check_open_ports(vm),
                "NSG Rules": all([check_nsg_rules(rg.name, nic.id.split('/')[-1]) for nic in vm.network_profile.network_interfaces])
            }
            
            print(f"\nCompliance Report for VM {vm.name}:")
            for policy, is_compliant in compliance.items():
                status = "Compliant" if is_compliant else "Non-Compliant"
                print(f"  {policy}: {status}")

if __name__ == "__main__":
    main()
