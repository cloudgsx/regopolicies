import subprocess
import json
import pandas as pd
from tabulate import tabulate

# List of role GUIDs or names to query using Azure CLI
roles = [
    "acdd72a7-3385-48ef-bd42-f606fba81ae7",  # Reader
    "00482a5a-887f-4fb3-b363-3b7fe8e74483",  # Key Vault Administrator
    "4417c67f-fecd-4fea-b567-b7f2c162a191",  # Key Vault Certificates Officer
    "14ad3dd4-f6f5-4205-9b49-8a365c6c34ba",  # Key Vault Crypto Officer
    "ba92f5b4-2d11-453d-a403-e96b0029c9fe",  # Storage Blob Data Contributor
    "2a2b9908-6aad-42e8-8c7e-ea62a4c46fb3",  # Storage Blob Data Reader
    "58a1c3b8-9a6d-4f1a-87a7-f6822c749e2b",  # Storage Queue Data Contributor
]

# Function to retrieve role details using Azure CLI
def get_role_details(role_identifier):
    try:
        # Run the Azure CLI command to get role definition
        result = subprocess.run(
            ["az", "role", "definition", "list", "--name", role_identifier],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        if result.returncode != 0:
            print(f"Error retrieving role {role_identifier}: {result.stderr}")
            return None

        # Parse the JSON output
        role_definitions = json.loads(result.stdout)
        if role_definitions:
            role_def = role_definitions[0]  # Get the first definition (assuming only one)
            return {
                "Role Name": role_def.get("roleName", "N/A"),
                "Description": role_def.get("description", "N/A"),
                "Assignable Scopes": "\n".join(role_def.get("assignableScopes", [])),
                "Actions": "\n".join(role_def["permissions"][0].get("actions", [])) if role_def["permissions"] else "N/A",
                "Not Actions": "\n".join(role_def["permissions"][0].get("notActions", [])) if role_def["permissions"] else "N/A",
                "Data Actions": "\n".join(role_def["permissions"][0].get("dataActions", [])) if role_def["permissions"] else "N/A",
            }
        return None
    except Exception as e:
        print(f"Error processing role {role_identifier}: {e}")
        return None

# Iterate over roles and retrieve their details
role_data = []
for role in roles:
    role_details = get_role_details(role)
    if role_details:
        role_data.append(role_details)

# Generate a clean table using pandas
if role_data:
    df = pd.DataFrame(role_data)
    # Convert to a pretty table for display
    print(tabulate(df, headers="keys", tablefmt="fancy_grid", showindex=False))
else:
    print("No role details found!")
