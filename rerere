Versioning Rules and Guidelines

This document outlines the rules and guidelines for managing version numbers in the project. We use Semantic Versioning (SemVer), which follows the format:

MAJOR.MINOR.PATCH

Version Number Components

MAJOR: Incremented when making incompatible changes or breaking existing functionality.

MINOR: Incremented when adding new, backward-compatible features or enhancements.

PATCH: Incremented when making backward-compatible bug fixes, performance improvements, or small updates.

When to Increment Each Component

1. Major Version (X.0.0)

Increment the major version under the following circumstances:

Introducing breaking changes to APIs, configurations, or workflows.

Removing deprecated functionality.

Replacing or overhauling existing functionality.

Examples:

A new API is introduced that is incompatible with the previous version.

An existing function or configuration is removed or renamed.

2. Minor Version (X.Y.0)

Increment the minor version when:

Adding new features that do not break existing functionality.

Enhancing or extending current features in a backward-compatible way.

Introducing optional configurations or components.

Examples:

Adding a new optional parameter to a configuration file.

Implementing a new Jenkins pipeline stage that integrates seamlessly with existing stages.

3. Patch Version (X.Y.Z)

Increment the patch version for:

Fixing bugs or resolving issues.

Making small, backward-compatible updates or optimizations.

Documentation updates (if the documentation is part of the versioned release).

Examples:

Fixing a syntax error in the Jenkinsfile.

Improving performance of an existing step in the CI pipeline.

Guidelines for Updating the Version Number

Always Increment Manually:

The version number should be updated manually in the designated configuration file (e.g., Jenkinsfile or version.json) before merging changes.

Commit the Version Change:

Include the updated version number as part of the commit message, e.g., Bump version to 1.1.2.

Document Changes:

Ensure that all significant changes are documented in the changelog, with a note about the corresponding version update.

Use Pre-Releases When Necessary:

For testing purposes, use pre-release versions such as 1.2.0-beta.1.

Examples of Version Updates

Scenario 1: Bug Fix

Current version: 1.1.2

Fix a typo or syntax error in the Jenkinsfile.

New version: 1.1.3 (Patch increment)

Scenario 2: Adding a New Feature

Current version: 1.1.3

Add a new optional stage to the CI pipeline for static code analysis.

New version: 1.2.0 (Minor increment)

Scenario 3: Breaking Change

Current version: 1.2.0

Rename a critical configuration file, requiring users to update their setups.

New version: 2.0.0 (Major increment)

