Confluence Page: Azure Image Creation Using Native Tooling

Overview

This document provides detailed information on the process of creating images in Azure using native tooling. It elaborates on the acceptance criteria, including process definition, benefits, testing methodologies, security considerations, and feasibility comparisons.

1. Defining the Process for Creating Images in Azure

To ensure a standardized and efficient approach to image creation in Azure, follow these steps:

Determine Requirements: Identify the OS, dependencies, configurations, and security policies required for the image.

Use Azure Image Builder: Utilize Azure Image Builder for automating and managing image creation.

Leverage Azure DevOps Pipelines: Implement pipelines for continuous integration and delivery (CI/CD) of images.

Define Infrastructure as Code (IaC): Use Terraform, ARM templates, or Bicep for repeatable image creation.

Apply Security Policies: Incorporate Microsoft Defender for Cloud and Azure Policy to enforce security best practices.

Store and Manage Images: Publish images to Azure Compute Gallery for centralized management and versioning.

Deploy and Validate: Use test environments to ensure images meet requirements before deployment.

2. Benefits of Using Native Azure Tooling

Leveraging Azure-native tools for image creation offers several advantages:

Seamless Integration: Ensures compatibility with Azure services like Virtual Machines, Scale Sets, and Kubernetes.

Enhanced Security: Leverages built-in compliance and governance features such as Microsoft Defender and Azure Policy.

Automation & Efficiency: Reduces manual intervention by automating image creation through Azure Image Builder and DevOps Pipelines.

Lower Operational Overhead: Eliminates the need for third-party solutions, simplifying maintenance and reducing costs.

Improved Performance: Optimized resource utilization results in faster image deployment and provisioning.

Centralized Management: Azure Compute Gallery allows efficient versioning, replication, and distribution of images.

3. Testing and Validation Methodology

To ensure the reliability and security of images, implement the following validation processes:

Automated Image Scanning: Use Microsoft Defender for Cloud to detect vulnerabilities and compliance violations.

Functional Testing: Deploy the image in a test environment and validate that all configurations and applications work as expected.

Performance Benchmarking: Measure boot time, application response time, and resource consumption.

Security Assessment: Conduct penetration testing and validate compliance with internal security policies.

Approval Workflow: Require approval from the security team before deploying images to production.

4. Transitioning to Fully Native Azure Tooling

To successfully transition from third-party solutions to Azure-native tooling:

Assess current workflows and identify dependencies.

Develop an implementation roadmap for moving image creation, management, and deployment to Azure.

Provide training to teams on Azure Image Builder, Compute Gallery, and DevOps Pipelines.

Gradually phase out third-party tools while ensuring minimal disruption.

5. Utilizing Azure DevOps for the Proof of Concept (PoC)

Azure DevOps will be used as the primary platform for PoC implementation:

Build Pipeline: Automate image creation with YAML-based pipelines.

Validation Stage: Include automated security scans and functional tests.

Release Pipeline: Deploy validated images to Azure Compute Gallery.

Monitoring and Feedback: Use Azure Monitor to track image performance and adoption.

6. Horizon Feasibility Assessment

Comparison of Azure and Horizon capabilities to determine feasibility:

Feature

Azure Native Tooling

Horizon

Automation

Yes

Limited

Integration with Azure

Full

Partial

Security Compliance

Strong

Moderate

Cost-effectiveness

High

Variable

Performance

Optimized

Standard

Internal Repository Support

Yes

Yes

7. Internet Dependency & Internal Repository Feasibility

Azure DevOps Artifacts: Can be used to host and manage private dependencies.

Private Compute Gallery: Ensures internal image distribution without external network dependency.

Azure Firewall & Private Link: Can restrict internet access while enabling secure internal communication.

VPN & ExpressRoute: Ensures connectivity to on-premises resources without exposing them to the internet.

8. Security & Compliance Coordination (CADA Team)

Engage with the Security Team (CADA) to ensure:

Compliance with internal security standards.

Implementation of Azure Policy for governance.

Approval workflows for image deployment.

Regular security audits and monitoring mechanisms.

Conclusion

This document outlines the structured approach for creating, testing, and managing images in Azure using native tooling. The next steps involve implementing the PoC within Azure DevOps, conducting security assessments, and finalizing the transition to native Azure tooling.
