import json
from azure.identity import DefaultAzureCredential
from azure.mgmt.subscription import SubscriptionClient
from azure.mgmt.compute import ComputeManagementClient

# Azure credential setup
credential = DefaultAzureCredential()

def get_subscriptions(credential):
    """Fetch all available Azure subscriptions."""
    subscription_client = SubscriptionClient(credential)
    subscriptions = subscription_client.subscriptions.list()
    return [sub.subscription_id for sub in subscriptions]

def check_vm_skus(subscription_id, region, vm_size, credential):
    """Check if the specified VM size is available in the given region."""
    compute_client = ComputeManagementClient(credential, subscription_id)
    sku_list = compute_client.resource_skus.list()
    
    for sku in sku_list:
        if sku.name == vm_size:
            # Safely check if the region exists in the SKU's locations
            locations = [loc for loc in sku.locations if loc == region]
            if locations:
                zones = None
                # Check for location_info and zones (if present)
                for loc_info in sku.location_info:
                    if loc_info.location == region:
                        zones = loc_info.zones if loc_info.zones else "No zones"
                return {"available": True, "zones": zones}
    return {"available": False, "zones": None}

def main():
    # Define parameters
    vm_size = "Standard_L8s_v3"  # Target VM size
    regions = ["eastus", "westus", "centralus"]  # Regions to check

    # Initialize result dictionary
    report = {}

    # Fetch subscriptions
    print("Fetching subscriptions...")
    subscription_ids = get_subscriptions(credential)

    # Iterate over subscriptions
    for sub_id in subscription_ids:
        print(f"Checking subscription: {sub_id}")
        report[sub_id] = {}

        # Check VM SKU availability in each region
        for region in regions:
            print(f"  Checking region: {region}")
            try:
                result = check_vm_skus(sub_id, region, vm_size, credential)
                report[sub_id][region] = result
            except Exception as e:
                report[sub_id][region] = {"error": str(e)}
                print(f"    Error while checking region {region}: {e}")

    # Save the report to a JSON file
    with open("vm_sku_availability_report.json", "w") as f:
        json.dump(report, f, indent=4)

    print("Report generated: vm_sku_availability_report.json")

if __name__ == "__main__":
    main()
